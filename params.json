{"name":"Libemf2svg","tagline":"EMF to SVG conversion library","body":"libemf2svg\r\n==========\r\n\r\n[![Build Status](https://travis-ci.org/kakwa/libemf2svg.svg?branch=master)](https://travis-ci.org/kakwa/libemf2svg)\r\n\r\nEMF to SVG conversion library\r\n\r\nDisclaimer\r\n----------\r\n\r\n**Work in progress.**\r\n\r\nOutput example\r\n--------------\r\n\r\n![Example](https://cdn.rawgit.com/kakwa/libemf2svg/master/goodies/demo-example.svg)\r\n\r\nBuilding\r\n--------\r\n\r\nCommands to build this project:\r\n\r\n```bash\r\n\r\n# options: \r\n# * [-DUSE_CLANG=on]: use clang instead of gcc\r\n# * [-DSTATIC=on]: build static library\r\n# * [-DDEBUG=on]: compile with debugging symboles\r\n#\r\n# CMAKE_INSTALL_PREFIX is optional, default is /usr/local/\r\n$ cmake . -DCMAKE_INSTALL_PREFIX=/usr/\r\n\r\n# compilation\r\n$ make\r\n\r\n# installation\r\n$ make install\r\n```\r\n\r\nCommand line tool\r\n-----------------\r\n\r\n```bash\r\n$ ./emf2svg --help\r\nUsage: emf2svg [OPTION...] -i FILE -o FILE\r\nemf2svg -- Enhanced Metafile to SVG converter\r\n\r\n  -h, --height=HEIGHT        Max height in px\r\n  -i, --input=FILE           Input EMF file\r\n  -o, --output=FILE          Output SVG file\r\n  -p, --emfplus              Handle EMF+ records\r\n  -v, --verbose              Produce verbose output\r\n  -w, --width=WIDTH          Max width in px\r\n  -?, --help                 Give this help list\r\n      --usage                Give a short usage message\r\n  -V, --version              Print program version\r\n\r\nMandatory or optional arguments to long options are also mandatory or optional\r\nfor any corresponding short options.\r\n\r\nReport bugs to <carpentier.pf@gmail.com>.\r\n\r\n# usage example:\r\n$ ./emf2svg -i ./tests/resources/emf/test-037.emf -o example.svg -v\r\n```\r\n\r\nLibrary\r\n-------\r\n\r\nShorten usage example ([complete example here](https://github.com/kakwa/libemf2svg/blob/master/goodies/example.c)):\r\n\r\n```C\r\n#include <EMFSVG.h>\r\n//[...]\r\nint main(int argc, char *argv[]){\r\n\r\n    /* emf content size */\r\n    size_t emf_size;\r\n    /* emf content */\r\n    char * emf_content;\r\n    /* svg output string */\r\n    char *svg_out = NULL;\r\n\r\n    //[...]\r\n\r\n    /*************************** options settings **************************/\r\n\r\n    /* allocate the options structure) */\r\n    generatorOptions *options = (generatorOptions *)calloc(1, \\\r\n            sizeof(generatorOptions));\r\n    /* debugging flag (prints the emf record in stdout if true) */\r\n    options->verbose = true;\r\n    /* emf+ flag (handles emf+ records if true) */\r\n    options->emfplus = true;\r\n    /* if a custom xml/svg namespace is needed (keep empty in doubt) */\r\n    options->nameSpace = (char *)\"svg\";\r\n    /* includes the svg start and stop tags (set to false if the result\r\n     * of this call is meant to be used inside another svg) */\r\n    options->svgDelimiter = true;\r\n    /* image width in px (set to 0 to use the original emf device width) */\r\n    options->imgWidth = 0;\r\n    /* image height in px (set to 0 to use the original emf device height) */\r\n    options->imgHeight = 0;\r\n\r\n    /***************************** conversion ******************************/\r\n\r\n    int ret = emf2svg(emf_content, emf_size, &svg_out, options);\r\n\r\n    /***********************************************************************/\r\n\r\n    //[...]\r\n}\r\n```\r\n\r\nSee [./src/conv/emf2svg.cpp](https://github.com/kakwa/libemf2svg/blob/master/src/conv/emf2svg.cpp) for a real life example.\r\n\r\nTesting\r\n-------\r\n\r\n* Stats on the number of emf records covered:\r\n\r\n```bash\r\n$ ./tests/resources/coverage.sh\r\n```\r\n\r\n* Fuzzing on the library:\r\n\r\n```bash\r\n$ ./tests/resources/check_corrupted.sh\r\n\r\n# generated corrupted files crashing the library are stored here:\r\nls ./tests/out/bad*\r\ntests/out/bad_corrupted_2014-12-01-063258.emf\r\n\r\n```\r\n\r\n* Check correctness and memleaks (xmllint and valgrind needed):\r\n\r\n```bash\r\n# options: -n to disable valgrind tests, -v for verbose output\r\n$ ./tests/resources/check_correctness.sh #[-n] [-v]\r\n\r\n# generated svg:\r\n$ ls tests/out/test-*\r\ntests/out/test-000.emf.svg  tests/out/test-051.emf.svg\r\n[...]\r\n```\r\n\r\nThe emf files used for these checks are located in [./tests/resources/emf/](https://github.com/kakwa/libemf2svg/blob/master/tests/resources/emf/).\r\n\r\nUseful Commands\r\n---------------\r\n\r\nTo build, run on emf test files and visualize (with geeqie):\r\n```bash\r\n$ cmake .&& \\\r\n    make &&\\\r\n    \"./tests/resources/check_correctness.sh\" -n &&\\\r\n    geeqie \"tests/out\"\r\n```\r\n\r\nTo check against corrupted emf:\r\n```bash\r\n$ cmake -DDEBUG=ON . -DUSE_CLANG=ON &&\\\r\n    make &&\\\r\n    \"./tests/resources/check_correctness.sh\" -sxN \\\r\n    -e \"./tests/resources/emf-corrupted/\"\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}